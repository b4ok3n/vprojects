import ui
import os
import json
import gg
import time
import strconv
 fn (mut app App) build() &ui.Window {
     return ui.window(
         width:  560
         height: 340
         title:  'V GUI Ideas'
         bg_color: gg.rgb(32, 34, 37)
         children: [
             ui.column(
                 margin: ui.Margin{20, 20, 20, 20}
                 spacing: 12
                 children: [
                    ui.label(text: 'V GUI Ideas', text_color: gg.white),
 struct Settings {
mut:
    dark_mode  bool
    theme_name string
 }
fn (mut app App) todo_row(id int, item TodoItem) &ui.Stack {
            ui.button(id: 'todo_edit_${id}', text: 'E', on_click: app.on_todo_edit, bg_color: app.accent_todo, text_color: gg.white),
             ui.button(id: 'todo_del_${id}', text: 'Ã—', on_click: app.on_todo_delete, bg_color: gg.rgb(160, 80, 80), text_color: gg.white),
         ]
     )
 }
 
// simple placeholder; replace later with real edit UI
fn (mut app App) on_todo_edit(_ &ui.Button) {}
fn (mut app App) load_theme_profile(name string) !ThemeProfile {
     path := os.join_path(app.themes_dir(), '${name}.json')
    if !os.exists(path) { return error('Theme not found: ${path}') }
    data := os.read_file(path)!
    return json.decode(ThemeProfile, data)!
 }
 
fn (mut app App) on_apply_theme_profile(_ &ui.Button) {
    profile := app.load_theme_profile(app.theme_name) or {
        app.window.set_title('Theme not found: ${app.theme_name}')
        return
    }
    app.apply_theme_profile(profile)
    app.window.set_title('Applied theme: ${profile.name}')
}
 
fn parse_hex_color(s string) gg.Color {
    mut t := s.trim_space()
    if t.starts_with('#') { t = t[1..] }
    val := u32(strconv.parse_uint(t, 16, 32) or { return gg.black })
    return gg.hex(val)
}

 fn (mut app App) apply_theme_profile(profile ThemeProfile) {
    app.window.bg_color = parse_hex_color(profile.win_bg)
     app.window.load_style()
 }
 fn (mut app App) on_toggle_theme(_ &ui.Button) {
     app.dark_mode = !app.dark_mode
    app.settings.dark_mode = app.dark_mode
     app.save_settings()
     app.apply_theme()
 }
